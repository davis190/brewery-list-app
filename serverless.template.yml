AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Brewery Site APIs.
Parameters: 
    WebUrl: 
      Type: String
      Default: "https://breweryapi.claytondavis.dev"
    pACMCertificate:
      Type: String
      Default: "arn:aws:acm:us-east-1:143237551823:certificate/43ff280b-d83a-4af0-99ba-31695ea4d71b"

# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 70
  Api:
    # Auth:
    #   DefaultAuthorizer: CognitoAuthorizer
    #   Authorizers:
    #     CognitoAuthorizer:
    #       UserPoolArn: !Ref pCognitoUserPool
    #   AddDefaultAuthorizerToCorsPreflight: False # https://github.com/awslabs/serverless-application-model/issues/717
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,*'"
      AllowOrigin: "'*'"

Resources:
  ## API
  rApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      # BinaryMediaTypes:
      #   - "*/*"
  ## Domain Name
  rDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref pACMCertificate
      DomainName: breweryapi.claytondavis.dev
  rBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      RestApiId: !Ref rApi
      DomainName: !Ref rDomainName

  ###################
  ## Brewery APIs
  ###################
  rApiBa:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: API-BreweryApi
      Handler: index.handler
      # Runtime: nodejs8.10
      CodeUri: ./lambda-api/
      Description: Function for brewery apis.
      # Layers:
      #   - !Ref rSharedLayerVersion
      MemorySize: 1028
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbGsTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbBaTable
        - SSMParameterReadPolicy:
            ParameterName: "/brewery-app/state-totals"
        - SSMParameterReadPolicy:
            ParameterName: "brewery-app/state-totals"
        - SSMParameterReadPolicy:
            ParameterName: "/brewery-app/ashley-been-state-totals"
        - SSMParameterReadPolicy:
            ParameterName: "brewery-app/ashley-been-state-totals"
      Environment:
        Variables:
          GS_DYNAMODB_TABLE: !Ref rDynamoDbGsTable
          BA_DYNAMODB_TABLE: !Ref rDynamoDbBaTable
      Events:
        BaBreweryByState:
          Type: Api
          Properties:
            Path: '/brewery/ba/state/{state}'
            Method: get
            RestApiId: !Ref rApi
        BaBreweryByStateCount:
          Type: Api
          Properties:
            Path: '/brewery/ba/state/{state}/count'
            Method: get
            RestApiId: !Ref rApi
        GsBreweryByState:
          Type: Api
          Properties:
            Path: '/brewery/gs/state/{state}'
            Method: get
            RestApiId: !Ref rApi
        GsBreweryByStateCount:
          Type: Api
          Properties:
            Path: '/brewery/gs/state/{state}/count'
            Method: get
            RestApiId: !Ref rApi
        GsBreweryByStateCount:
          Type: Api
          Properties:
            Path: '/brewery/gs'
            Method: get
            RestApiId: !Ref rApi
        BreweryCount:
          Type: Api
          Properties:
            Path: '/brewery/count'
            Method: get
            RestApiId: !Ref rApi
  ###################
  ## CRON
  ###################
  rCronBaDynamoPopulation:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: CRON-BrewersAssociationPopulation
      Handler: index.handler
      # Runtime: nodejs8.10
      CodeUri: ./lambda-brewers-association-cron/
      Description: CRON function used to populate dynamo with brewery information from the brewers association
      # Layers:
      #   - !Ref rSharedLayerVersion
      MemorySize: 1028
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0 6 1 * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbBaTable
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref rDynamoDbBaTable

  rCronGsDynamoPopulation:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: CRON-GoogleSheetsPopulation
      Handler: index.handler
      # Runtime: nodejs8.10
      CodeUri: ./lambda-google-sheets-cron/
      Description: CRON function used to populate dynamo with visited brewery information from google sheets
      # Layers:
      #   - !Ref rSharedLayerVersion
      MemorySize: 1028
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0 7 1 * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbGsTable
        - SSMParameterReadPolicy:
            ParameterName: "brewery-app/api-key"
        - SSMParameterReadPolicy:
            ParameterName: "brewery-app/sheet-id"
        - SSMParameterReadPolicy:
            ParameterName: "/brewery-app/api-key"
        - SSMParameterReadPolicy:
            ParameterName: "/brewery-app/sheet-id"
        - Statement:
          - Sid: SSMPutParameter
            Effect: Allow
            Action:
              - ssm:PutParameter
            Resource: '*'
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref rDynamoDbGsTable

  rCronGsBaLink:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: CRON-GS-BA-Link
      Handler: index.handler
      # Runtime: nodejs8.10
      CodeUri: ./lambda-ba-gs-link-cron/
      Description: CRON used to link the GA and BA table data together
      # Layers:
      #   - !Ref rSharedLayerVersion
      MemorySize: 1028
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0 8 1 * ? *)
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbGsTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref rDynamoDbBaTable
      Environment:
        Variables:
          GS_DYNAMODB_TABLE: !Ref rDynamoDbGsTable
          BA_DYNAMODB_TABLE: !Ref rDynamoDbBaTable

  #################
  ## DynamoDB
  #################
  rDynamoDbBaTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: BrewersAssociation
      AttributeDefinitions: 
        - AttributeName: brewery_id
          AttributeType: S
        - AttributeName: state
          AttributeType: S
        - AttributeName: brewery_name
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: state-index
          KeySchema:
            - AttributeName: state
              KeyType: HASH
          Projection: 
            # NonKeyAttributes: 
            #   - name
            ProjectionType: "ALL"
        - IndexName: brewery-name-index
          KeySchema:
            - AttributeName: brewery_name
              KeyType: HASH
          Projection: 
            # NonKeyAttributes: 
            #   - name
            ProjectionType: "ALL"
        - IndexName: brewery-id-index
          KeySchema:
            - AttributeName: brewery_id
              KeyType: HASH
          Projection: 
            # NonKeyAttributes: 
            #   - name
            ProjectionType: "ALL"
      KeySchema: 
        - AttributeName: brewery_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  rDynamoDbGsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: GoogleSheetsBreweries
      AttributeDefinitions: 
        - AttributeName: brewery_name
          AttributeType: S
        - AttributeName: state
          AttributeType: S
        - AttributeName: brewery_id
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: state-index
          KeySchema:
            - AttributeName: state
              KeyType: HASH
          Projection: 
            # NonKeyAttributes: 
            #   - name
            ProjectionType: "ALL"
        - IndexName: brewery-id-index
          KeySchema:
            - AttributeName: brewery_id
              KeyType: HASH
          Projection: 
            # NonKeyAttributes: 
            #   - name
            ProjectionType: "ALL"
      KeySchema: 
        - AttributeName: brewery_name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
